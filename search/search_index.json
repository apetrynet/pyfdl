{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PyFDL NOTE! PyFDL is under development and should not be used in production PyFDL is a toolkit to parse and produce Framing Decision List (FDL) files in python. In addition to parsing FDL files, PyFDL aims to provide sample applications/plugins to apply framing intents described in the FDL. PyFDL is modeled around the official spec . Install Until a package is available on PyPi, you'll need to install PyFDL manually. It's recommended to install packages like this in a virtual environment. Installing from PyPi pip install pyfdl Installing directly from main branch on GitHub (At your own risk) pip install git+https://github.com/apetrynet/pyfdl.git When working on a contribution If you're working a contribution to this project you can save some time by installing the package like described below. This way you won't need to reinstall the package for every change you do to the code. # Replace PROJECT_ROOT with the root of this project cd [PROJECT_ROOT] pip install -e .","title":"Welcome to PyFDL"},{"location":"#welcome-to-pyfdl","text":"NOTE! PyFDL is under development and should not be used in production PyFDL is a toolkit to parse and produce Framing Decision List (FDL) files in python. In addition to parsing FDL files, PyFDL aims to provide sample applications/plugins to apply framing intents described in the FDL. PyFDL is modeled around the official spec .","title":"Welcome to PyFDL"},{"location":"#install","text":"Until a package is available on PyPi, you'll need to install PyFDL manually. It's recommended to install packages like this in a virtual environment.","title":"Install"},{"location":"#installing-from-pypi","text":"pip install pyfdl","title":"Installing from PyPi"},{"location":"#installing-directly-from-main-branch-on-github-at-your-own-risk","text":"pip install git+https://github.com/apetrynet/pyfdl.git","title":"Installing directly from main branch on GitHub (At your own risk)"},{"location":"#when-working-on-a-contribution","text":"If you're working a contribution to this project you can save some time by installing the package like described below. This way you won't need to reinstall the package for every change you do to the code. # Replace PROJECT_ROOT with the root of this project cd [PROJECT_ROOT] pip install -e .","title":"When working on a contribution"},{"location":"getting_started/","text":"Getting Started Install NOTE! Please note that at the time of writing this PyFDL is not released on PyPi. Please refer to README.md for instructions. pip install pyfdl Create an FDL from scratch import pyfdl from io import StringIO fdl = pyfdl.FDL() # Applying defaults will provide you with a valid staring point fdl.apply_defaults() # Let's create a framing intent framing_intent = pyfdl.FramingIntent( label=\"1.78-1 Framing\", _id=\"FDLSMP03\", aspect_ratio=pyfdl.DimensionsInt(width=16, height=9), protection=0.088 ) # Add the newly created framing intent to our FDL fdl.framing_intents.add_item(framing_intent) # Now let's create a canvas canvas = pyfdl.Canvas( label=\"Open Gate RAW\", _id=\"20220310\", source_canvas_id=\"20220310\", dimensions=pyfdl.DimensionsInt(width=5184, height=4320), effective_dimensions=pyfdl.DimensionsInt(width=5184, height=4320), effective_anchor_point=pyfdl.Point(x=0, y=0), photosite_dimensions=pyfdl.DimensionsInt(5184, height=4320), physical_dimensions=pyfdl.DimensionsFloat(width=25.92, height=21.60), anamorphic_squeeze=1.30 ) # Let's now add our canvas to the FDL within a context. # If no such context exists, one will be created for you. fdl.place_canvas_in_context(context_label=\"PanavisionDXL2\", canvas=canvas) # Finally, let's create a framing decision canvas.place_framing_intent(framing_intent=framing_intent) # Validate our FDL and save it (using StringIO as example) with StringIO() as f: pyfdl.dump(fdl, f, validate=True)","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"getting_started/#install","text":"NOTE! Please note that at the time of writing this PyFDL is not released on PyPi. Please refer to README.md for instructions. pip install pyfdl","title":"Install"},{"location":"getting_started/#create-an-fdl-from-scratch","text":"import pyfdl from io import StringIO fdl = pyfdl.FDL() # Applying defaults will provide you with a valid staring point fdl.apply_defaults() # Let's create a framing intent framing_intent = pyfdl.FramingIntent( label=\"1.78-1 Framing\", _id=\"FDLSMP03\", aspect_ratio=pyfdl.DimensionsInt(width=16, height=9), protection=0.088 ) # Add the newly created framing intent to our FDL fdl.framing_intents.add_item(framing_intent) # Now let's create a canvas canvas = pyfdl.Canvas( label=\"Open Gate RAW\", _id=\"20220310\", source_canvas_id=\"20220310\", dimensions=pyfdl.DimensionsInt(width=5184, height=4320), effective_dimensions=pyfdl.DimensionsInt(width=5184, height=4320), effective_anchor_point=pyfdl.Point(x=0, y=0), photosite_dimensions=pyfdl.DimensionsInt(5184, height=4320), physical_dimensions=pyfdl.DimensionsFloat(width=25.92, height=21.60), anamorphic_squeeze=1.30 ) # Let's now add our canvas to the FDL within a context. # If no such context exists, one will be created for you. fdl.place_canvas_in_context(context_label=\"PanavisionDXL2\", canvas=canvas) # Finally, let's create a framing decision canvas.place_framing_intent(framing_intent=framing_intent) # Validate our FDL and save it (using StringIO as example) with StringIO() as f: pyfdl.dump(fdl, f, validate=True)","title":"Create an FDL from scratch"},{"location":"top_level_functions/","text":"Top Level Functions These functions follow the convention of other file parsing packages like python's builtin json package and provide both reading and writing to and from strings and objects. pyfdl.load(fp, validate=True) Load an FDL from a file. Parameters: fp ( IO ) \u2013 file pointer validate ( bool , default: True ) \u2013 validate incoming json with jsonschema Raises: ValidationError \u2013 if the contents doesn't follow the spec Returns: FDL ( FDL ) \u2013 pyfdl.loads(s, validate=True) Load an FDL from string. Parameters: s ( str ) \u2013 string representation of an FDL validate ( bool , default: True ) \u2013 validate incoming json with jsonschema Returns: FDL ( FDL ) \u2013 pyfdl.dump(obj, fp, validate=True, indent=2) Dump an FDL to a file. Parameters: obj ( FDL ) \u2013 object to serialize fp ( IO ) \u2013 file pointer validate ( bool , default: True ) \u2013 validate outgoing json with jsonschema indent ( Union [ int , None] , default: 2 ) \u2013 amount of spaces pyfdl.dumps(obj, validate=True, indent=2) Dump an FDL to string Parameters: obj ( FDL ) \u2013 object to serialize validate ( bool , default: True ) \u2013 validate outgoing json with jsonschema indent ( Union [ int , None] , default: 2 ) \u2013 amount of spaces Returns: string ( str ) \u2013 representation of the resulting json","title":"Top Level Functions"},{"location":"top_level_functions/#top-level-functions","text":"These functions follow the convention of other file parsing packages like python's builtin json package and provide both reading and writing to and from strings and objects.","title":"Top Level Functions"},{"location":"top_level_functions/#pyfdl.load","text":"Load an FDL from a file. Parameters: fp ( IO ) \u2013 file pointer validate ( bool , default: True ) \u2013 validate incoming json with jsonschema Raises: ValidationError \u2013 if the contents doesn't follow the spec Returns: FDL ( FDL ) \u2013","title":"load"},{"location":"top_level_functions/#pyfdl.loads","text":"Load an FDL from string. Parameters: s ( str ) \u2013 string representation of an FDL validate ( bool , default: True ) \u2013 validate incoming json with jsonschema Returns: FDL ( FDL ) \u2013","title":"loads"},{"location":"top_level_functions/#pyfdl.dump","text":"Dump an FDL to a file. Parameters: obj ( FDL ) \u2013 object to serialize fp ( IO ) \u2013 file pointer validate ( bool , default: True ) \u2013 validate outgoing json with jsonschema indent ( Union [ int , None] , default: 2 ) \u2013 amount of spaces","title":"dump"},{"location":"top_level_functions/#pyfdl.dumps","text":"Dump an FDL to string Parameters: obj ( FDL ) \u2013 object to serialize validate ( bool , default: True ) \u2013 validate outgoing json with jsonschema indent ( Union [ int , None] , default: 2 ) \u2013 amount of spaces Returns: string ( str ) \u2013 representation of the resulting json","title":"dumps"},{"location":"Classes/canvas/","text":"Canvas pyfdl.Canvas(label=None, _id=None, source_canvas_id=None, dimensions=None, effective_dimensions=None, effective_anchor_point=None, photosite_dimensions=None, physical_dimensions=None, anamorphic_squeeze=None, framing_decisions=None) Bases: Base get_dimensions() Get the most relevant dimensions and anchor point for the canvas. effective_dimensions and effective_anchor_point win over dimensions Returns: ( dimensions , anchor_point ) \u2013 place_framing_intent(framing_intent) Create a new FramingDecision based on the provided FramingIntent and add it to the collection of framing decisions. The framing decision's properties are calculated for you. If the canvas has effective dimensions set, these will be used for the calculations. Otherwise, we use the dimensions Parameters: framing_intent ( FramingIntent ) \u2013 framing intent to place in canvas Returns: framing_decision_id ( str ) \u2013 id of the newly created framing decision","title":"Canvas"},{"location":"Classes/canvas/#canvas","text":"","title":"Canvas"},{"location":"Classes/canvas/#pyfdl.Canvas","text":"Bases: Base","title":"Canvas"},{"location":"Classes/canvas/#pyfdl.Canvas.get_dimensions","text":"Get the most relevant dimensions and anchor point for the canvas. effective_dimensions and effective_anchor_point win over dimensions Returns: ( dimensions , anchor_point ) \u2013","title":"get_dimensions"},{"location":"Classes/canvas/#pyfdl.Canvas.place_framing_intent","text":"Create a new FramingDecision based on the provided FramingIntent and add it to the collection of framing decisions. The framing decision's properties are calculated for you. If the canvas has effective dimensions set, these will be used for the calculations. Otherwise, we use the dimensions Parameters: framing_intent ( FramingIntent ) \u2013 framing intent to place in canvas Returns: framing_decision_id ( str ) \u2013 id of the newly created framing decision","title":"place_framing_intent"},{"location":"Classes/canvas_template/","text":"Canvas Template pyfdl.CanvasTemplate(label=None, _id=None, target_dimensions=None, target_anamorphic_squeeze=None, fit_source=None, fit_method=None, alignment_method_vertical=None, alignment_method_horizontal=None, preserve_from_source_canvas=None, maximum_dimensions=None, pad_to_maximum=False, _round=None) Bases: Base","title":"Canvas Template"},{"location":"Classes/canvas_template/#canvas-template","text":"","title":"Canvas Template"},{"location":"Classes/canvas_template/#pyfdl.CanvasTemplate","text":"Bases: Base","title":"CanvasTemplate"},{"location":"Classes/common/","text":"Common Classes Below is a collection of the common classes that are used by other classes. pyfdl.Base(*args, **kwargs) Bases: ABC Base class not to be instanced directly. Parameters: *args ( Any , default: () ) \u2013 **kwargs ( Any , default: {} ) \u2013 Attributes: attributes \u2013 list of attributes described in FDL spec kwarg_map \u2013 map attribute names that clash with reserved builtin python functions to safe alternatives like: (id -> _id) and (uuid -> _uuid) object_map \u2013 map attributes to custom classes required \u2013 list of required attributes. Supports linked attributes like: \"effective_dimensions.effective_anchor_point\" where \"effective_anchor_point\" is required if \"effective_dimensions\" is set defaults \u2013 map default values to attributes. In addition to primitive values supports: callable, subclasses of Base apply_defaults() Applies default values defined in the defaults attribute to attributes that are None check_required() Check that required attributes contain values. Checks linked attributes like: \"effective_dimensions.effective_anchor_point\" where \"effective_anchor_point\" is required if \"effective_dimensions\" is set Returns: list \u2013 a list of missing attributes from_dict(raw) classmethod Create instances of classes from a provided dict. Parameters: raw ( dict ) \u2013 dictionary to convert to supported classes Returns: cls ( Any ) \u2013 and instance of the current class to_dict() Produce a dictionary representation of the current object along with all sub objects. Raises: FDLError \u2013 if required keys are missing Returns: dict \u2013 representation of object pyfdl.TypedCollection(cls) Collection only accepting items of a given class. In addition, a strict control of unique id's is enforced. Parameters: cls ( Any ) \u2013 type of class to be accepted add_item(item) Add an item to the collection. All items added to a collection get associated to the collection by passing itself as parent Parameters: item ( Any ) \u2013 of type passed at instancing of the collection. Raises: FDLError \u2013 for missing id or if a duplicate id is detected get_item(item_id) Get an item in the collection Parameters: item_id ( str ) \u2013 id of item you'd like to get Returns: item ( Union [ Any , None] ) \u2013 in collection or None if not found remove_item(item_id) Remove an item in the collection if found Parameters: item_id ( str ) \u2013 id of item to be removed pyfdl.DimensionsFloat(width, height) Bases: Base Dimensions properly formatted and stored as floats Parameters: width ( float ) \u2013 height ( float ) \u2013 pyfdl.DimensionsInt(width, height) Bases: Base Dimensions properly formatted and stored as ints Parameters: width ( int ) \u2013 height ( int ) \u2013 pyfdl.Point(x, y) Bases: Base Point properly formatted Parameters: x ( float ) \u2013 y ( float ) \u2013 pyfdl.RoundStrategy(even=None, mode=None) Bases: Base Describes how to handle rounding of values. Parameters: even ( str , default: None ) \u2013 \"whole\" = to nearest integer, \"even\" = to nearest even-numbered integer mode ( str , default: None ) \u2013 \"up\" = always round up, \"down\" = always round down Raises: FDLError \u2013 if you provide a value other than the ones listed above Global Variables Version numbers are used as default values in Header and to select a matching json schema file if no version is set. pyfdl.FDL_SCHEMA_MAJOR = 1 module-attribute pyfdl.FDL_SCHEMA_MINOR = 0 module-attribute pyfdl.FDL_SCHEMA_VERSION = {'major': FDL_SCHEMA_MAJOR, 'minor': FDL_SCHEMA_MINOR} module-attribute","title":"Common Classes"},{"location":"Classes/common/#common-classes","text":"Below is a collection of the common classes that are used by other classes.","title":"Common Classes"},{"location":"Classes/common/#pyfdl.Base","text":"Bases: ABC Base class not to be instanced directly. Parameters: *args ( Any , default: () ) \u2013 **kwargs ( Any , default: {} ) \u2013 Attributes: attributes \u2013 list of attributes described in FDL spec kwarg_map \u2013 map attribute names that clash with reserved builtin python functions to safe alternatives like: (id -> _id) and (uuid -> _uuid) object_map \u2013 map attributes to custom classes required \u2013 list of required attributes. Supports linked attributes like: \"effective_dimensions.effective_anchor_point\" where \"effective_anchor_point\" is required if \"effective_dimensions\" is set defaults \u2013 map default values to attributes. In addition to primitive values supports: callable, subclasses of Base","title":"Base"},{"location":"Classes/common/#pyfdl.Base.apply_defaults","text":"Applies default values defined in the defaults attribute to attributes that are None","title":"apply_defaults"},{"location":"Classes/common/#pyfdl.Base.check_required","text":"Check that required attributes contain values. Checks linked attributes like: \"effective_dimensions.effective_anchor_point\" where \"effective_anchor_point\" is required if \"effective_dimensions\" is set Returns: list \u2013 a list of missing attributes","title":"check_required"},{"location":"Classes/common/#pyfdl.Base.from_dict","text":"Create instances of classes from a provided dict. Parameters: raw ( dict ) \u2013 dictionary to convert to supported classes Returns: cls ( Any ) \u2013 and instance of the current class","title":"from_dict"},{"location":"Classes/common/#pyfdl.Base.to_dict","text":"Produce a dictionary representation of the current object along with all sub objects. Raises: FDLError \u2013 if required keys are missing Returns: dict \u2013 representation of object","title":"to_dict"},{"location":"Classes/common/#pyfdl.TypedCollection","text":"Collection only accepting items of a given class. In addition, a strict control of unique id's is enforced. Parameters: cls ( Any ) \u2013 type of class to be accepted","title":"TypedCollection"},{"location":"Classes/common/#pyfdl.TypedCollection.add_item","text":"Add an item to the collection. All items added to a collection get associated to the collection by passing itself as parent Parameters: item ( Any ) \u2013 of type passed at instancing of the collection. Raises: FDLError \u2013 for missing id or if a duplicate id is detected","title":"add_item"},{"location":"Classes/common/#pyfdl.TypedCollection.get_item","text":"Get an item in the collection Parameters: item_id ( str ) \u2013 id of item you'd like to get Returns: item ( Union [ Any , None] ) \u2013 in collection or None if not found","title":"get_item"},{"location":"Classes/common/#pyfdl.TypedCollection.remove_item","text":"Remove an item in the collection if found Parameters: item_id ( str ) \u2013 id of item to be removed","title":"remove_item"},{"location":"Classes/common/#pyfdl.DimensionsFloat","text":"Bases: Base Dimensions properly formatted and stored as floats Parameters: width ( float ) \u2013 height ( float ) \u2013","title":"DimensionsFloat"},{"location":"Classes/common/#pyfdl.DimensionsInt","text":"Bases: Base Dimensions properly formatted and stored as ints Parameters: width ( int ) \u2013 height ( int ) \u2013","title":"DimensionsInt"},{"location":"Classes/common/#pyfdl.Point","text":"Bases: Base Point properly formatted Parameters: x ( float ) \u2013 y ( float ) \u2013","title":"Point"},{"location":"Classes/common/#pyfdl.RoundStrategy","text":"Bases: Base Describes how to handle rounding of values. Parameters: even ( str , default: None ) \u2013 \"whole\" = to nearest integer, \"even\" = to nearest even-numbered integer mode ( str , default: None ) \u2013 \"up\" = always round up, \"down\" = always round down Raises: FDLError \u2013 if you provide a value other than the ones listed above","title":"RoundStrategy"},{"location":"Classes/common/#global-variables","text":"Version numbers are used as default values in Header and to select a matching json schema file if no version is set.","title":"Global Variables"},{"location":"Classes/common/#pyfdl.FDL_SCHEMA_MAJOR","text":"","title":"FDL_SCHEMA_MAJOR"},{"location":"Classes/common/#pyfdl.FDL_SCHEMA_MINOR","text":"","title":"FDL_SCHEMA_MINOR"},{"location":"Classes/common/#pyfdl.FDL_SCHEMA_VERSION","text":"","title":"FDL_SCHEMA_VERSION"},{"location":"Classes/context/","text":"Context pyfdl.Context(label=None, context_creator=None, canvases=None) Bases: Base","title":"Context"},{"location":"Classes/context/#context","text":"","title":"Context"},{"location":"Classes/context/#pyfdl.Context","text":"Bases: Base","title":"Context"},{"location":"Classes/errors/","text":"Errors pyfdl.FDLError Bases: Exception","title":"Errors"},{"location":"Classes/errors/#errors","text":"","title":"Errors"},{"location":"Classes/errors/#pyfdl.FDLError","text":"Bases: Exception","title":"FDLError"},{"location":"Classes/fdl/","text":"FDL The FDL class is meant to be an entry point and is a \"merge\" between a Header class and container class. The Header is created for you based on the arguments you provide at initialisation or you can pass a Header object as an attribute if you wish. pyfdl.FDL(_uuid=None, version=None, fdl_creator=None, default_framing_intent=None, framing_intents=None, contexts=None, canvas_templates=None) Bases: Base header: Header property writable Returns: Header ( Header ) \u2013 based on attributes apply_defaults() Applies default values defined in the defaults attribute to attributes that are None check_required() Check that required attributes contain values. Checks linked attributes like: \"effective_dimensions.effective_anchor_point\" where \"effective_anchor_point\" is required if \"effective_dimensions\" is set Returns: list \u2013 a list of missing attributes validate() Validate the current state of the FDL. ID's and relationships between items are checked and values are validated against the json schema. Raises: FDLValidationError \u2013 if any errors are found from_dict(raw) classmethod Create instances of classes from a provided dict. Parameters: raw ( dict ) \u2013 dictionary to convert to supported classes Returns: cls ( Any ) \u2013 and instance of the current class to_dict() Produce a dictionary representation of the current object along with all sub objects. Raises: FDLError \u2013 if required keys are missing Returns: dict \u2013 representation of object load_schema() Load a jsonschema based on the version in Header or default to current version set in base Returns: schema ( dict ) \u2013 place_canvas_in_context(context_label, canvas) Place a canvas in a context. If no context with the provided label exist, a new context will be created for you. Parameters: context_label ( str ) \u2013 name of existing or to be created context canvas ( Canvas ) \u2013 to be placed in context","title":"FDL"},{"location":"Classes/fdl/#fdl","text":"The FDL class is meant to be an entry point and is a \"merge\" between a Header class and container class. The Header is created for you based on the arguments you provide at initialisation or you can pass a Header object as an attribute if you wish.","title":"FDL"},{"location":"Classes/fdl/#pyfdl.FDL","text":"Bases: Base","title":"FDL"},{"location":"Classes/fdl/#pyfdl.FDL.header","text":"Returns: Header ( Header ) \u2013 based on attributes","title":"header"},{"location":"Classes/fdl/#pyfdl.FDL.apply_defaults","text":"Applies default values defined in the defaults attribute to attributes that are None","title":"apply_defaults"},{"location":"Classes/fdl/#pyfdl.FDL.check_required","text":"Check that required attributes contain values. Checks linked attributes like: \"effective_dimensions.effective_anchor_point\" where \"effective_anchor_point\" is required if \"effective_dimensions\" is set Returns: list \u2013 a list of missing attributes","title":"check_required"},{"location":"Classes/fdl/#pyfdl.FDL.validate","text":"Validate the current state of the FDL. ID's and relationships between items are checked and values are validated against the json schema. Raises: FDLValidationError \u2013 if any errors are found","title":"validate"},{"location":"Classes/fdl/#pyfdl.FDL.from_dict","text":"Create instances of classes from a provided dict. Parameters: raw ( dict ) \u2013 dictionary to convert to supported classes Returns: cls ( Any ) \u2013 and instance of the current class","title":"from_dict"},{"location":"Classes/fdl/#pyfdl.FDL.to_dict","text":"Produce a dictionary representation of the current object along with all sub objects. Raises: FDLError \u2013 if required keys are missing Returns: dict \u2013 representation of object","title":"to_dict"},{"location":"Classes/fdl/#pyfdl.FDL.load_schema","text":"Load a jsonschema based on the version in Header or default to current version set in base Returns: schema ( dict ) \u2013","title":"load_schema"},{"location":"Classes/fdl/#pyfdl.FDL.place_canvas_in_context","text":"Place a canvas in a context. If no context with the provided label exist, a new context will be created for you. Parameters: context_label ( str ) \u2013 name of existing or to be created context canvas ( Canvas ) \u2013 to be placed in context","title":"place_canvas_in_context"},{"location":"Classes/framing_decision/","text":"Framing Decision pyfdl.FramingDecision(label=None, _id=None, framing_intent_id=None, dimensions=None, anchor_point=None, protection_dimensions=None, protection_anchor_point=None) Bases: Base","title":"Framing Decision"},{"location":"Classes/framing_decision/#framing-decision","text":"","title":"Framing Decision"},{"location":"Classes/framing_decision/#pyfdl.FramingDecision","text":"Bases: Base","title":"FramingDecision"},{"location":"Classes/framing_intent/","text":"Framing Intent pyfdl.FramingIntent(label=None, _id=None, aspect_ratio=None, protection=None) Bases: Base","title":"Framing Intent"},{"location":"Classes/framing_intent/#framing-intent","text":"","title":"Framing Intent"},{"location":"Classes/framing_intent/#pyfdl.FramingIntent","text":"Bases: Base","title":"FramingIntent"},{"location":"Classes/header/","text":"Header pyfdl.Header(_uuid=None, version=None, fdl_creator=None, default_framing_intent=None) Bases: Base","title":"Header"},{"location":"Classes/header/#header","text":"","title":"Header"},{"location":"Classes/header/#pyfdl.Header","text":"Bases: Base","title":"Header"}]}